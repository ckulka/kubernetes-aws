AWSTemplateFormatVersion: 2010-09-09

Description: CloudFormation template for a single-master Kubernetes cluster.

Outputs:
  DNSName:
    Description: The URL for the cluster.
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-Endpoint"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId1:
    Type: AWS::EC2::Subnet::Id
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH Key for the EC2 instances
  LoadBalancerScheme:
    Type: String
    Default: internet-facing
    Description: Specifies whether the load balancer is internal or Internet-facing.
    AllowedValues:
      - internet-facing
      - internal
  KubernetesToken:
    Type: String
    Default: "123456.1234567890123456"
    AllowedPattern: ^[a-z0-9]{6}\.[a-z0-9]{16}$
    Description: Token to join this Kubernetes cluster
  PodNetworkCIDR:
    Type: String
    Default: "10.244.0.0/16"
    Description: CIDR of the overlay network (Flannel), should not conflict with an existing subnet.
  DockerVersion:
    Type: String
    Default: "1.12.6"
    Description: |
      Version of Docker to use. Must be compatible with Kubernetes, 
      see https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md
  KubernetesVersion:
    Type: String
    Default: "1.8.0"
    Description: Version of Kubernetes to use, see https://github.com/kubernetes/kubernetes/releases
  FlannelVersion:
    Type: String
    Default: "0.9.0"
    Description: Version of Flannel to use, see https://github.com/coreos/flannel/releases

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: AWS Placement
        Parameters:
          - VpcId
          - SubnetId1
          - SubnetId2
          - KeyName
          - LoadBalancerScheme
      - Label:
          default: Kubernetes Configuration
        Parameters:
          - KubernetesToken
          - PodNetworkCIDR
          - KubernetesVersion
          - DockerVersion
          - FlannelVersion

Resources:
  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      Type: network
      Scheme: !Ref LoadBalancerScheme
      Subnets: 
        - !Ref SubnetId1
#        - !Ref SubnetId2 TODO

  # Load Balancer: Master
  MasterAPIListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 6443
      Protocol: TCP
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref MasterAPITargetGroup
  MasterAPITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-master
      VpcId: !Ref VpcId
      Port: 6443
      Protocol: TCP
    
  # Load Balancer: Node
  NodeHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref NodeHTTPTargetGroup
  NodeHTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-http
      VpcId: !Ref VpcId
      Port: 80
      Protocol: TCP
  NodeHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: TCP
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref NodeHTTPSTargetGroup
  NodeHTTPSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-https
      VpcId: !Ref VpcId
      Port: 443
      Protocol: TCP

  # Master: File System
  MasterFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-master
  MasterSubnetId1MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref MasterFileSystem
      SubnetId: !Ref SubnetId1
      SecurityGroups: 
        - !Ref MasterSecurityGroup
  MasterSubnetId2MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref MasterFileSystem
      SubnetId: !Ref SubnetId2
      SecurityGroups: 
        - !Ref MasterSecurityGroup

  # Master: Autoscaling Group
  MasterLaunchConfigurtion:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups: 
        - !Ref MasterSecurityGroup
      ImageId: ami-46c1b650
      InstanceType: t2.small
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeType: gp2
            SnapshotId: snap-0c136bf135a86351f
            DeleteOnTermination: true
            VolumeSize: 25
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            # See http://docs.aws.amazon.com/efs/latest/ug/wt1-test.html
            echo Mounting EFS
            yum -y install nfs-utils
            mkdir -p /mnt/efs
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${MasterFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
            mkdir -p /mnt/efs/kubernetes /mnt/efs/etcd
            ln -s /mnt/efs/etcd /var/lib/etcd
            ln -s /mnt/efs/kubernetes /etc/kubernetes
            echo Mounted EFS

            # See https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-docker-ce
            echo Installing Docker
            yum install -y yum-utils device-mapper-persistent-data lvm2
            yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum install -y docker-${DockerVersion}
            systemctl enable docker.service && systemctl start docker.service
            echo Installed Docker

            # See https://kubernetes.io/docs/setup/independent/install-kubeadm/
            echo Installing Kubernetes
            cat <<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                    https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF
            setenforce 0
            yum install -y kubelet-${KubernetesVersion} kubeadm-${KubernetesVersion} kubectl-${KubernetesVersion}
            sed -i 's/systemd/cgroupfs/' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
            systemctl daemon-reload
            systemctl enable kubelet
            systemctl start kubelet
            echo Installed Kubernetes
            
            # See https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/
            if [ ! -f /etc/kubernetes/admin.conf ]; then
              echo Initialising Kubernetes
              kubeadm init                                            \
                --kubernetes-version v${KubernetesVersion}            \
                --cloud-provider=aws                                  \
                --apiserver-cert-extra-sans ${LoadBalancer.DNSName}   \
                --pod-network-cidr ${PodNetworkCIDR}                  \
                --token ${KubernetesToken}
              KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v${FlannelVersion}/Documentation/kube-flannel.yml
              echo Initialised Kubernetes
            else
              echo Kubernetes already initialised
            fi
  MasterAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MasterFileSystem
    Properties:
      LaunchConfigurationName: !Ref MasterLaunchConfigurtion
      VPCZoneIdentifier: 
        - !Ref SubnetId1
#        - !Ref SubnetId2 TODO
      MinSize: "0"
      DesiredCapacity: "1"
      MaxSize: "1"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-master
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref MasterAPITargetGroup

  # Master: Security Group
  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-master
      GroupDescription: Kubernetes Master Security Group
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-master
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  MasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: "-1"

  # Node: Autoscaling Group
  NodeLaunchConfigurtion:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups: 
        - !Ref NodeSecurityGroup
      ImageId: ami-46c1b650
      InstanceType: t2.small
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeType: gp2
            SnapshotId: snap-0c136bf135a86351f
            DeleteOnTermination: true
            VolumeSize: 25
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            # See https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-docker-ce
            echo Installing Docker
            yum install -y yum-utils device-mapper-persistent-data lvm2
            yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum install -y docker-${DockerVersion}
            systemctl enable docker.service && systemctl start docker.service
            echo Installed Docker

            # See https://kubernetes.io/docs/setup/independent/install-kubeadm/
            echo Installing Kubernetes
            cat <<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                    https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF
            setenforce 0
            yum install -y kubelet-${KubernetesVersion} kubeadm-${KubernetesVersion} kubectl-${KubernetesVersion}
            systemctl daemon-reload
            systemctl enable kubelet
            systemctl start kubelet
            echo Installed Kubernetes
            
            # See https://kubernetes.io/docs/admin/kubeadm/#kubeadm-join
            echo Joining the cluster
            kubeadm join --token ${KubernetesToken} --discovery-token-unsafe-skip-ca-verification ${LoadBalancer.DNSName}:6443
            echo Joined the cluster
  NodeAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref NodeLaunchConfigurtion
      VPCZoneIdentifier: 
        - !Ref SubnetId1
#        - !Ref SubnetId2 TODO
      MinSize: "0"
      DesiredCapacity: "0"
      MaxSize: "4"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref NodeHTTPTargetGroup
        - !Ref NodeHTTPSTargetGroup

  # Node: Security Group
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-node
      GroupDescription: Kubernetes Node Security Group
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  NodeSecurityGroupNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
  NodeSecurityGroupMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: "-1"
